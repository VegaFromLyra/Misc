8 - 5 - 2 - 6 - 3

5 - 2 - 6 - 3
node = 8

2 - 6 - 3
node = 5

6 - 3
node = 2

3
node = 6

null
node = 3

beforeStart 2 - 3
beforeEnd 3

afterStart 8 - 5 - 6
afterEnd 6

        static void Partition(LinkedListNode<int> node, int x)
        {
            LinkedListNode<int> beforeStart = null;
            LinkedListNode<int> beforeEnd = null;

            LinkedListNode<int> afterStart = null;
            LinkedListNode<int> afterEnd = null;

            while (node != null)
            {
                LinkedListNode<int> next = node.Next;
                node.Next = null;
                 
                if (node.Value < x)
                {
                   if (beforeStart == null)
                   {
                       beforeStart = node;
                       beforeEnd = node;
                   }
                   else
                   {
                       beforeEnd.Next = node;
                       beforeEnd = node;
                   }
                }
                else
                {
                    if (afterStart == null)
                    {
                        afterStart = node;
                        afterEnd = node;
                    } 
                    else
                    {
                        afterEnd.Next = node;
                        afterEnd = node;
                    }
                }

                node = next;
            }

            if (beforeStart == null)
            {
                beforeStart = afterStart;
            }
            else
            {
                Node current = beforeStart;
                while (current.Next != null)
                {
                    current = current.Next;
                }

                current.Next = afterStart;
            }

            Console.WriteLine("Partitioned list is");

            LinkedListNode<int> print = beforeStart;

            while (print != null)
            {
                Console.Write(print.Value + " ");
                print = print.Next;
            }
        }