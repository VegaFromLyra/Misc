// Solution - 1
// Time complexity - O(nlogn)
Node BuildBSTWithMinimalHeight(int[] sortedArray)
{
    Node root = new Node();

    int medianIndex = (sortedArray.Length - 1)/ 2;

    root.Value = sortedArray[medianIndex];

    for(int i = 0; i < sortedArray.Length; i++)
    {
        if (i != medianIndex)
        {
           Insert(root, i);
        }
    }
}

void Insert(Node root, int value)
{
   if (root == null)
   {
      root = new Node();
      root.Value = value;
   }
   else
   {
      if (value <= root.Value)
      {
         Insert(root.Left, value);
      }
      else
      {
         Insert(root.Right, value);  
      }
   }
}

// Time complexity O(logn)
// Solution 2
Node CreateMinimalBST (int[] sortedArray)
{
   return CreateMinimalBST(sortedArray, 0, sortedArray.Length - 1);
}

Node CreateMinimalBST(int[] sortedArray, int start, int end)
{
    if (end < start)
    {
        return null;
    }

    int midIndex = (end + start)/2; // NOTE - This needs to be addition else there will be duplicates
     
    root = new Node();
    root.Value = sortedArray[midIndex];


    root.Left =  CreateMinimalBST(sortedArray, start, midIndex - 1);
    root.Right = CreateMinimalBST(sortedArray, midIndex + 1, end);

    return root;
}
